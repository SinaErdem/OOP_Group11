#include "authscreen.h"
#include "ui_authscreen.h"
#include "signup.h"
#include "admindashboard.h"
#include "userdashboard.h"
#include <QFile>
#include <QString>
#include <QMessageBox>
#include <QTextStream>

AuthScreen::AuthScreen(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::AuthScreen)
{
    ui->setupUi(this);
    this->setWindowIcon(QIcon("C:/LibManager/LibManager/LBResources/LB_favicon.png"));
}

AuthScreen::~AuthScreen()
{
    delete ui;
}

void AuthScreen::on_signupButton_clicked()
{
    SignUp *signUpWindow = new SignUp(this); // Open the SignUp window when clicked
    signUpWindow->show();
}

QString AuthScreen::checkCredentials(const QString &username, const QString &password) {
    QFile file("C:/LibManager/LibManager/LBResources/users.txt");

    // Check if file exists
    if (!file.exists()) {
        qDebug() << "File not found!";
        return "";
    }

    // Open the file
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qDebug() << "Could not open file!";
        return "";
    }

    QTextStream in(&file);
    // Read each line from the file
    while (!in.atEnd()) {
        QString line = in.readLine().trimmed();
        QStringList parts = line.split(",");

        // Format: email, username, password, userType
        if (parts.size() == 4) {
            QString fileUsername = parts[1].trimmed(); // Username
            QString filePassword = parts[2].trimmed(); // Password
            QString userType = parts[3].trimmed();     // UserType

            qDebug() << "Checking username:" << fileUsername;
            qDebug() << "Checking password:" << filePassword;
            qDebug() << "Checking userType:" << userType;

            // Check if username and password match
            if (fileUsername == username && filePassword == password) {
                file.close();
                return userType; // Return the user type if credentials are correct
            }
        }
    }

    file.close();
    return ""; // Return empty if the credentials do not match
}

void AuthScreen::on_signinButton_clicked()
{
    QString username = ui->UsernameLineEdit->text(); // Get the username
    QString password = ui->PasswordLineEdit->text(); // Get the password

    // Check for empty fields
    if (username.isEmpty() || password.isEmpty()) {
        QMessageBox::warning(this, "Error", "Please fill in both username and password!");
        return;
    }

    // Validate the user credentials
    QString userType = checkCredentials(username, password);

    // If authentication fails
    if (userType.isEmpty()) {
        QMessageBox::warning(this, "Login Error", "Incorrect username or password.");
        return;
    }

    // If authentication is successful, redirect to the appropriate dashboard
    if (userType == "Admin") {
        QMessageBox::information(this, "Login Successful", "Redirecting to Admin Dashboard...");
        AdminDashboard *adminDashboard = new AdminDashboard(this);
        adminDashboard->show();
    } else if (userType == "User") {
        QMessageBox::information(this, "Login Successful", "Redirecting to User Dashboard...");
        UserDashboard *userDashboard = new UserDashboard(this);
        userDashboard->show();
    } else {
        QMessageBox::warning(this, "Error", "Invalid user type!");
    }
}
